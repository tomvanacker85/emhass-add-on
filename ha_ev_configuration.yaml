# EMHASS EV Home Assistant Configuration Helpers
# Add these to your configuration.yaml or include in a separate file

# ==============================================================================
# ========================= INPUT HELPERS FOR EV =============================
# ==============================================================================

input_number:
  # EV Battery Configuration
  ev_battery_capacity:
    name: "EV Battery Capacity"
    min: 30000
    max: 200000
    step: 1000
    unit_of_measurement: "Wh"
    icon: mdi:car-battery
    initial: 77000

  ev_charging_efficiency:
    name: "EV Charging Efficiency"
    min: 0.7
    max: 1.0
    step: 0.01
    icon: mdi:battery-charging
    initial: 0.9

  ev_nominal_charging_power:
    name: "EV Nominal Charging Power"
    min: 1380
    max: 22000
    step: 100
    unit_of_measurement: "W"
    icon: mdi:flash
    initial: 4600

  ev_minimum_charging_power:
    name: "EV Minimum Charging Power"
    min: 1000
    max: 5000
    step: 100
    unit_of_measurement: "W"
    icon: mdi:flash-outline
    initial: 1380

  ev_consumption_efficiency:
    name: "EV Consumption Efficiency"
    min: 0.1
    max: 0.4
    step: 0.01
    unit_of_measurement: "kWh/km"
    icon: mdi:car-electric
    initial: 0.15

  # EV Driving Schedule
  ev_daily_commute_km:
    name: "Daily Commute Distance"
    min: 0
    max: 200
    step: 5
    unit_of_measurement: "km"
    icon: mdi:map-marker-distance
    initial: 50

  ev_weekend_km:
    name: "Weekend Driving Distance"
    min: 0
    max: 500
    step: 10
    unit_of_measurement: "km"
    icon: mdi:car-side
    initial: 100

  # EV SOC Settings
  ev_minimum_soc:
    name: "EV Minimum SOC"
    min: 0.1
    max: 0.5
    step: 0.05
    icon: mdi:battery-low
    initial: 0.2

input_datetime:
  # Work Schedule
  ev_work_departure:
    name: "Work Departure Time"
    has_date: false
    has_time: true
    initial: "07:30"

  ev_work_return:
    name: "Work Return Time"
    has_date: false
    has_time: true
    initial: "18:00"

input_boolean:
  # EV Control Flags
  ev_optimization_enabled:
    name: "EV Optimization Enabled"
    icon: mdi:car-electric
    initial: true

  ev_weekend_charging_only:
    name: "Weekend Charging Only"
    icon: mdi:calendar-weekend
    initial: false

# ==============================================================================
# ========================= SHELL COMMANDS FOR EV ============================
# ==============================================================================

shell_command:
  # EMHASS EV optimization command
  emhass_ev_naive_mpc: 'curl -i -H "Content-Type: application/json" -X POST -d "{{ payload }}" http://localhost:5000/action/naive-mpc-optim'
  
  # EMHASS EV publish results
  emhass_ev_publish_data: 'curl -i -H "Content-Type: application/json" -X POST -d "{}" http://localhost:5000/action/publish-data'

# ==============================================================================
# ========================= EXAMPLE SENSORS FOR EV ===========================
# ==============================================================================

sensor:
  # Example EV battery SOC sensor (replace with your actual EV integration)
  - platform: template
    sensors:
      ev_battery_soc:
        friendly_name: "EV Battery SOC"
        unit_of_measurement: "%"
        device_class: battery
        value_template: >
          {% if states('sensor.your_ev_battery_level') != 'unknown' %}
            {{ states('sensor.your_ev_battery_level')|float / 100 }}
          {% else %}
            0.5
          {% endif %}
        icon_template: >
          {% set battery_level = states('sensor.ev_battery_soc')|float * 100 %}
          {% if battery_level > 80 %}
            mdi:battery-high
          {% elif battery_level > 60 %}
            mdi:battery-medium
          {% elif battery_level > 40 %}
            mdi:battery-low
          {% elif battery_level > 20 %}
            mdi:battery-outline
          {% else %}
            mdi:battery-alert
          {% endif %}

binary_sensor:
  # Example EV connected sensor (replace with your actual EV integration)
  - platform: template
    sensors:
      ev_connected:
        friendly_name: "EV Connected"
        device_class: plug
        value_template: >
          {{ states('switch.your_ev_charger')|bool or 
             states('sensor.your_ev_charging_status') == 'connected' }}
        icon_template: >
          {% if is_state('binary_sensor.ev_connected', 'on') %}
            mdi:ev-station
          {% else %}
            mdi:car
          {% endif %}

# ==============================================================================
# ========================= AUTOMATION EXAMPLES ==============================
# ==============================================================================

automation:
  # Update EV parameters based on actual state
  - alias: "EV State Monitor"
    description: "Monitor EV connection and update availability"
    triggers:
      - trigger: state
        entity_id: binary_sensor.ev_connected
      - trigger: state
        entity_id: sensor.ev_battery_soc
    actions:
      - action: input_number.set_value
        target:
          entity_id: input_number.ev_current_soc
        data:
          value: "{{ states('sensor.ev_battery_soc')|float }}"

  # Automatically adjust charging schedule for holidays
  - alias: "EV Holiday Schedule"
    description: "Disable commute charging on holidays"
    triggers:
      - trigger: state
        entity_id: calendar.holidays
        to: "on"
    actions:
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.ev_weekend_charging_only

# ==============================================================================
# ====================== LOVELACE DASHBOARD CARDS ===========================
# ==============================================================================

# Add this card to your Lovelace dashboard:
#
# type: entities
# title: EMHASS EV Configuration
# entities:
#   - entity: input_number.ev_battery_capacity
#   - entity: input_number.ev_nominal_charging_power
#   - entity: input_number.ev_daily_commute_km
#   - entity: input_datetime.ev_work_departure
#   - entity: input_datetime.ev_work_return
#   - entity: input_number.ev_minimum_soc
#   - entity: sensor.ev_battery_soc
#   - entity: binary_sensor.ev_connected
#   - entity: input_boolean.ev_optimization_enabled
#
# type: history-graph
# title: EV Charging Schedule
# entities:
#   - entity: sensor.p_ev0
#     name: EV Charging Power
#   - entity: sensor.soc_ev0
#     name: EV Battery SOC

# ==============================================================================
# ========================= INTEGRATION NOTES =================================
# ==============================================================================

# To integrate with your specific EV:
#
# 1. Tesla Integration:
#    - Replace 'sensor.your_ev_battery_level' with 'sensor.tesla_battery_level'
#    - Replace 'binary_sensor.ev_connected' with 'binary_sensor.tesla_charger_connected'
#
# 2. BMW ConnectedDrive:
#    - Replace 'sensor.your_ev_battery_level' with 'sensor.bmw_remaining_battery_percent'
#    - Replace 'binary_sensor.ev_connected' with 'binary_sensor.bmw_charging_status'
#
# 3. Volkswagen WeConnect:
#    - Replace 'sensor.your_ev_battery_level' with 'sensor.volkswagen_battery_level'
#    - Replace 'binary_sensor.ev_connected' with 'binary_sensor.volkswagen_charging'
#
# 4. Generic EVSE/Wallbox:
#    - Use power meter sensors from your charging station
#    - Create template sensors based on charging power > 0
#
# 5. Manual Override:
#    - Use input_boolean helpers for manual EV connection status
#    - Use input_number helpers for manual SOC entry